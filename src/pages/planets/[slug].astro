---
import BaseLayout from '../../layouts/BaseLayout.astro';
import '../../styles/planet-details.css';
import '../../styles/wiki.css';

interface PlanetFrontmatter {
    planet_id: string;
    name: string;
    scientific_name: string;
    type: string;
    biome: string;
    gravity_source: string;
    nickname: string;
    atmosphere_type: string;
    primary_resources: string[];
    scientific_interest: string[];
    habitability: string;
    year_length_days: number;
    day_length_hours: number;
    description: string;
    claimed_no?: number;
    opensea_link?: string;
    images?: string[];
}

interface MarkdownModule {
    frontmatter: PlanetFrontmatter;
    compiledContent(): string;
}

export async function getStaticPaths() {
    const planetFiles = Object.values(import.meta.glob<MarkdownModule>('../../content/planets/*.md', { eager: true }));

    return planetFiles.map(planet => ({
        params: { slug: planet.frontmatter.name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-*|-*$/g, '') },
        props: { planet },
    }));
}

const { planet } = Astro.props as { planet: MarkdownModule };

// Calculate pricing
const allPlanets = Object.values(import.meta.glob<MarkdownModule>('../../content/planets/*.md', { eager: true }));
const claimedPlanets = allPlanets.filter(p => p.frontmatter.claimed_no !== undefined);
const nextClaimPrice = claimedPlanets.length + 1;

function getPlanetPrice(planet: MarkdownModule): number {
    if (planet.frontmatter.claimed_no !== undefined) {
        return planet.frontmatter.claimed_no;
    }
    return nextClaimPrice;
}

function isPlanetClaimed(planet: MarkdownModule): boolean {
    return planet.frontmatter.claimed_no !== undefined;
}

const slug = planet.frontmatter.name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-*|-*$/g, '');
const imageSlug = planet.frontmatter.name.toLowerCase().replace(/[^a-z0-9]+/g, '_').replace(/^_*|_*$/g, '');
const imagePath = `/images/${planet.frontmatter.planet_id.toString().padStart(3, '0')}_${imageSlug}.png`;
const isClaimed = isPlanetClaimed(planet);
const price = getPlanetPrice(planet);

// Get the full compiled markdown content
const fullContent = await planet.compiledContent();

// More flexible header detection using regex patterns
const extendedLorePattern = /<h2[^>]*>Extended Lore \(worldbuilding &#x26; deeper reading\)<\/h2>/i;
const relatedLorePattern = /<h2[^>]*>Related Lore<\/h2>/i;

const extendedLoreMatch = fullContent.match(extendedLorePattern);
const relatedLoreMatch = fullContent.match(relatedLorePattern);

let filteredContent = '';
let relatedLoreContent = '';

if (extendedLoreMatch) {
    const startIndex = extendedLoreMatch.index || 0;
    
    if (relatedLoreMatch && (relatedLoreMatch.index || 0) > startIndex) {
        const relatedLoreStartIndex = relatedLoreMatch.index || 0;
        filteredContent = fullContent.substring(startIndex, relatedLoreStartIndex);
        relatedLoreContent = fullContent.substring(relatedLoreStartIndex);
    } else {
        filteredContent = fullContent.substring(startIndex);
    }
    
    // Replace the header with a cleaner version
    filteredContent = filteredContent.replace(extendedLorePattern, '<h2>Extended Lore</h2>');
}

// Define an interface for related lore items
interface RelatedLoreItem {
    text: string;
    url: string;
    description?: string;
}

// Function to parse related lore links from HTML content
function parseRelatedLore(content: string) {
    const categories: { species: RelatedLoreItem[]; resources: RelatedLoreItem[]; relationships: RelatedLoreItem[]; organizations: RelatedLoreItem[]; concepts: RelatedLoreItem[]; features: RelatedLoreItem[]; places: RelatedLoreItem[]; technology: RelatedLoreItem[]; } = {
        species: [],
        resources: [],
        relationships: [],
        organizations: [],
        concepts: [],
        features: [],
        places: [],
        technology: [],
    };

    const liRegex = /<li><a href="(.*?)">(.*?)<\/a>(.*?)<\/li>/g;

    // Extract Species section
    const speciesMatch = content.match(/<h3[^>]*>Species<\/h3>\s*<ul>(.*?)<\/ul>/s);
    if (speciesMatch && speciesMatch[1]) {
        let match;
        while ((match = liRegex.exec(speciesMatch[1])) !== null) {
            categories.species.push({ text: match[2], url: match[1], description: match[3].trim() });
        }
    }

    // Extract Resources section
    const resourcesMatch = content.match(/<h3[^>]*>Resources<\/h3>\s*<ul>(.*?)<\/ul>/s);
    if (resourcesMatch && resourcesMatch[1]) {
        let match;
        while ((match = liRegex.exec(resourcesMatch[1])) !== null) {
            categories.resources.push({ text: match[2], url: match[1], description: match[3].trim() });
        }
    }

    // Extract Relationships section
    const relationshipsMatch = content.match(/<h3[^>]*>Relationships<\/h3>\s*<ul>(.*?)<\/ul>/s);
    if (relationshipsMatch && relationshipsMatch[1]) {
        let match;
        while ((match = liRegex.exec(relationshipsMatch[1])) !== null) {
            categories.relationships.push({ text: match[2], url: match[1], description: match[3].trim() });
        }
    }

    // Extract Organizations section
    const organizationsMatch = content.match(/<h3[^>]*>Organizations<\/h3>\s*<ul>(.*?)<\/ul>/s);
    if (organizationsMatch && organizationsMatch[1]) {
        let match;
        while ((match = liRegex.exec(organizationsMatch[1])) !== null) {
            categories.organizations.push({ text: match[2], url: match[1], description: match[3].trim() });
        }
    }

    // Extract Concepts section
    const conceptsMatch = content.match(/<h3[^>]*>Concepts<\/h3>\s*<ul>(.*?)<\/ul>/s);
    if (conceptsMatch && conceptsMatch[1]) {
        let match;
        while ((match = liRegex.exec(conceptsMatch[1])) !== null) {
            categories.concepts.push({ text: match[2], url: match[1], description: match[3].trim() });
        }
    }

    // Extract Features section
    const featuresMatch = content.match(/<h3[^>]*>Features<\/h3>\s*<ul>(.*?)<\/ul>/s);
    if (featuresMatch && featuresMatch[1]) {
        let match;
        while ((match = liRegex.exec(featuresMatch[1])) !== null) {
            categories.features.push({ text: match[2], url: match[1], description: match[3].trim() });
        }
    }

    // Extract Places section
    const placesMatch = content.match(/<h3[^>]*>Places<\/h3>\s*<ul>(.*?)<\/ul>/s);
    if (placesMatch && placesMatch[1]) {
        let match;
        while ((match = liRegex.exec(placesMatch[1])) !== null) {
            categories.places.push({ text: match[2], url: match[1], description: match[3].trim() });
        }
    }

    // Extract Technology section
    const technologyMatch = content.match(/<h3[^>]*>Technology<\/h3>\s*<ul>(.*?)<\/ul>/s);
    if (technologyMatch && technologyMatch[1]) {
        let match;
        while ((match = liRegex.exec(technologyMatch[1])) !== null) {
            categories.technology.push({ text: match[2], url: match[1], description: match[3].trim() });
        }
    }

    return categories;
}

const relatedLore = parseRelatedLore(relatedLoreContent);

// DEBUGGING RELATED LORE - START
// console.log('=== DEBUGGING RELATED LORE ===');
// console.log('Planet:', planet.frontmatter.name);
// console.log('relatedLoreContent (raw, first 500 chars):', relatedLoreContent.substring(0, 500));
// console.log('Parsed relatedLore object:', JSON.stringify(relatedLore, null, 2));
// DEBUGGING RELATED LORE - END

const planetImages = planet.frontmatter.images || [];

---

<BaseLayout title={`Claim ${planet.frontmatter.name} - Distant Worlds`} currentPath={Astro.url.pathname}>
    <style>
        .claim-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        
        .planet-hero {
            position: relative;
            height: 70vh;
            background-size: 150vh;
            background-position: center;
            background-attachment: fixed;
            border-radius: 20px;
            overflow: hidden;
            margin-bottom: 3rem;
        }
        
        .planet-hero::before {
            content: '';
            position: absolute;
            inset: 0;
            background: linear-gradient(
                135deg,
                rgba(0, 0, 0, 0.3) 0%,
                rgba(0, 0, 0, 0.1) 50%,
                rgba(0, 0, 0, 0.4) 100%
            );
        }
        
        .hero-content {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 3rem;
            background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
            color: white;
        }
        
        .planet-id-hero {
            font-size: 1.2em;
            color: #00d4ff;
            font-weight: 600;
            margin-bottom: 0.5rem;
            text-transform: uppercase;
            letter-spacing: 2px;
        }
        
        .planet-name-hero {
            font-size: 3.5em;
            font-weight: 800;
            margin: 0;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        
        .planet-scientific-hero {
            font-size: 1.4em;
            font-style: italic;
            color: rgba(255, 255, 255, 0.8);
            margin-top: 0.5rem;
        }
        
        .claim-section {
            display: grid;
            grid-template-columns: 1fr 400px;
            gap: 3rem;
            margin-bottom: 3rem;
        }
        
        .planet-details {
            background: rgba(22, 27, 34, 0.4);
            backdrop-filter: blur(12px);
            -webkit-backdrop-filter: blur(12px);
            border: 1px solid rgba(48, 54, 61, 0.6);
            border-radius: 20px;
            padding: 2.5rem;
            color: white;
        }
        
        .claim-panel {
            background: rgba(22, 27, 34, 0.6);
            backdrop-filter: blur(12px);
            -webkit-backdrop-filter: blur(12px);
            border: 1px solid rgba(48, 54, 61, 0.6);
            border-radius: 20px;
            padding: 2.5rem;
            color: white;
            height: fit-content;
            position: sticky;
            top: 100px;
        }
        
        .claim-status-large {
            text-align: center;
            margin-bottom: 2rem;
        }
        
        .claim-badge {
            display: inline-block;
            padding: 12px 24px;
            border-radius: 30px;
            font-weight: 700;
            font-size: 1.1em;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 1rem;
        }
        
        .claim-badge.available {
            background: linear-gradient(135deg, rgba(0, 212, 255, 0.2) 0%, rgba(29, 78, 216, 0.2) 100%);
            color: #00d4ff;
            border: 2px solid rgba(0, 212, 255, 0.4);
            box-shadow: 0 0 20px rgba(0, 212, 255, 0.2);
        }
        
        .claim-badge.claimed {
            background: linear-gradient(135deg, rgba(0, 255, 136, 0.2) 0%, rgba(34, 197, 94, 0.2) 100%);
            color: #00ff88;
            border: 2px solid rgba(0, 255, 136, 0.4);
            box-shadow: 0 0 20px rgba(0, 255, 136, 0.2);
        }
        
        .price-display {
            text-align: center;
            margin-bottom: 2rem;
        }
        
        .price-amount {
            font-size: 3rem;
            font-weight: 800;
            color: #9333ea;
            text-shadow: 0 0 20px rgba(147, 51, 234, 0.5);
            margin-bottom: 0.5rem;
        }
        
        .price-label {
            color: rgba(255, 255, 255, 0.7);
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .claim-button {
            width: 100%;
            padding: 18px 24px;
            background: linear-gradient(135deg, #2d1b69 0%, #6b46c1 50%, #9333ea 100%);
            color: white;
            border: none;
            border-radius: 15px;
            font-size: 1.2em;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 1px;
            cursor: pointer;
            transition: all 0.4s ease;
            border: 2px solid rgba(147, 51, 234, 0.4);
            box-shadow: 
                0 0 25px rgba(147, 51, 234, 0.3),
                0 8px 20px rgba(0, 0, 0, 0.2);
            position: relative;
            overflow: hidden;
        }
        
        .claim-button:hover {
            transform: translateY(-3px);
            box-shadow: 
                0 0 35px rgba(147, 51, 234, 0.5),
                0 12px 30px rgba(0, 0, 0, 0.3);
            border-color: rgba(147, 51, 234, 0.8);
        }
        
        .claim-button:disabled {
            background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
            color: rgba(255, 255, 255, 0.4);
            cursor: not-allowed;
            border-color: rgba(255, 255, 255, 0.1);
            box-shadow: none;
        }
        
        .claim-button:disabled:hover {
            transform: none;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .stat-card {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 1.5rem;
            text-align: center;
        }
        
        .stat-label {
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 0.5rem;
        }
        
        .stat-value {
            color: white;
            font-size: 1.2em;
            font-weight: 600;
        }
        
        .resources-list, .interests-list {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }
        
        .resource-tag, .interest-tag {
            background: rgba(0, 212, 255, 0.2);
            color: #00d4ff;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.85em;
            border: 1px solid rgba(0, 212, 255, 0.3);
        }
        
        .interest-tag {
            background: rgba(255, 136, 0, 0.2);
            color: #ff8800;
            border-color: rgba(255, 136, 0, 0.3);
        }
        
        .description-section {
            margin-bottom: 2rem;
        }
        
        .section-title {
            color: #00d4ff;
            font-size: 1.5em;
            font-weight: 600;
            margin-bottom: 1rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .lore-section {
            background: rgba(22, 27, 34, 0.4);
            backdrop-filter: blur(12px);
            -webkit-backdrop-filter: blur(12px);
            border: 1px solid rgba(48, 54, 61, 0.6);
            border-radius: 20px;
            padding: 2.5rem;
            color: white;
            margin-top: 3rem;
        }
        
        .back-button {
            position: fixed;
            top: 20px;
            left: 30px;
            background: rgba(22, 27, 34, 0.8);
            backdrop-filter: blur(12px);
            -webkit-backdrop-filter: blur(12px);
            border: 1px solid rgba(48, 54, 61, 0.6);
            color: white;
            padding: 3px 8px;
            border-radius: 10px;
            text-decoration: none;
            font-weight: 700;
            transition: all 0.3s ease;
            z-index: 1000;
            font-size: 0.8em;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .back-button:hover {
            background: rgba(22, 27, 34, 0.95);
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        }
        
        @media (max-width: 768px) {
            .claim-section {
                grid-template-columns: 1fr;
                gap: 2rem;
            }
            
            .planet-name-hero {
                font-size: 2.5em;
            }
            
            .claim-panel {
                position: static;
            }
        }
        
        .related-lore-section {
            background: rgba(22, 27, 34, 0.4);
            backdrop-filter: blur(12px);
            -webkit-backdrop-filter: blur(12px);
            border: 1px solid rgba(48, 54, 61, 0.6);
            border-radius: 20px;
            padding: 2.5rem;
            margin-top: 3rem;
            color: white;
        }

        .related-lore-section h3 {
            color: #00d4ff;
            margin-top: 0;
            margin-bottom: 1.5rem;
            font-size: 1.6em;
            border-bottom: 1px solid rgba(0, 212, 255, 0.3);
            padding-bottom: 0.5rem;
        }

        .related-lore-section ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .related-lore-section li {
            margin-bottom: 0.8rem;
        }

        .related-lore-section a {
            color: #9333ea;
            text-decoration: none;
            font-weight: 600;
            transition: color 0.3s ease;
        }

        .related-lore-section a:hover {
            color: #c780ff;
            text-decoration: underline;
        }

        /* Debug section styles */
        .debug-section {
            background: rgba(255, 0, 0, 0.1);
            border: 2px solid red;
            border-radius: 20px;
            padding: 2.5rem;
            margin-top: 3rem;
            color: white;
        }

        .debug-section h2 {
            color: red;
            margin-bottom: 1rem;
        }

        .debug-section pre {
            white-space: pre-wrap;
            font-size: 12px;
            color: white;
            max-height: 400px;
            overflow-y: auto;
        }

    </style>

    <div class="claim-container">
        {planetImages.length > 0 && (
            <div class="image-gallery">
                {planetImages.length > 1 ? (
                    <div class="carousel-container">
                        <div class="carousel-images">
                            {planetImages.map(src => <img src={src} alt={planet.frontmatter.name} />)}
                        </div>
                        <div class="carousel-nav">
                            {planetImages.map((_, index) => (
                                <button class="nav-dot" data-slide={index}></button>
                            ))}
                        </div>
                    </div>
                ) : (
                    <img src={planetImages[0]} alt={planet.frontmatter.name} class="single-image"/>
                )}
            </div>
        )}

        <div class="planet-hero" style={`background-image: url(${imagePath});`}>
            <div class="hero-content">
                <div class="planet-id-hero">{planet.frontmatter.planet_id.toString().padStart(3, '0')}</div>
                <h1 class="planet-name-hero">{planet.frontmatter.name}</h1>
                <p class="planet-scientific-hero">{planet.frontmatter.scientific_name}</p>
            </div>
        </div>

        <div class="claim-section">
            <div class="planet-details">
                <div class="description-section">
                    <h2 class="section-title">Description</h2>
                    <p>{planet.frontmatter.description}</p>
                </div>

                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-label">Type</div>
                        <div class="stat-value">{planet.frontmatter.type}</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Biome</div>
                        <div class="stat-value">{planet.frontmatter.biome}</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Gravity Source</div>
                        <div class="stat-value">{planet.frontmatter.gravity_source}</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Atmosphere</div>
                        <div class="stat-value">{planet.frontmatter.atmosphere_type}</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Habitability</div>
                        <div class="stat-value">{planet.frontmatter.habitability}</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Year Length</div>
                        <div class="stat-value">{planet.frontmatter.year_length_days} days</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Day Length</div>
                        <div class="stat-value">{planet.frontmatter.day_length_hours} hours</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Nickname</div>
                        <div class="stat-value">"{planet.frontmatter.nickname}"</div>
                    </div>
                </div>

                <div class="section-title">Primary Resources</div>
                <div class="resources-list">
                    {planet.frontmatter.primary_resources.map(resource => (
                        <span class="resource-tag">{resource}</span>
                    ))}
                </div>

                <div class="section-title" style="margin-top: 1.5rem;">Scientific Interest</div>
                <div class="interests-list">
                    {planet.frontmatter.scientific_interest.map(interest => (
                        <span class="interest-tag">{interest}</span>
                    ))}
                </div>
            </div>

            <div class="claim-panel">
                <div class="claim-status-large">
                    <div class={`claim-badge ${isClaimed ? 'claimed' : 'available'}`}>
                        {isClaimed ? 'Already Claimed' : 'Available to Claim'}
                    </div>
                </div>

                <div class="price-display">
                    <div class="price-amount">${price}</div>
                    <div class="price-label">USD</div>
                </div>

                <button 
                    class="claim-button" 
                    disabled={!isClaimed ? false : !planet.frontmatter.opensea_link}
                    onclick={isClaimed && planet.frontmatter.opensea_link ? `window.open('${planet.frontmatter.opensea_link}', '_blank')` : isClaimed ? '' : `alert('Claiming ${planet.frontmatter.name} for $${price}! This would integrate with your payment system.')`}
                >
                    {isClaimed ? (planet.frontmatter.opensea_link ? 'View on OpenSea' : 'Already Claimed') : 'Claim This Planet'}
                </button>

                {isClaimed && (
                    <p style="text-align: center; margin-top: 1rem; color: rgba(255, 255, 255, 0.6); font-size: 0.9em;">
                        This planet was claimed for ${price} USD
                    </p>
                )}
            </div>
        </div>

        {filteredContent && (
            <div class="lore-section">
                <div set:html={filteredContent} />
            </div>
        )}

        {Object.keys(relatedLore).some(category => relatedLore[category as keyof typeof relatedLore].length > 0) && (
            <div class="related-lore-section">
                <h2>Related Lore</h2>
                {relatedLore.species.length > 0 && (
                    <>
                        <h3>Species</h3>
                        <ul>
                            {relatedLore.species.map(item => (
                                <li>
                                    <a href={item.url} class={item.url.includes('/planets/') ? 'planet-link' : ''}>
                                        {item.text}
                                    </a>
                                    {item.description && <span style="color: red; font-weight: bold;">{item.description}</span>}
                                </li>
                            ))}
                        </ul>
                    </>
                )}
                {relatedLore.resources.length > 0 && (
                    <>
                        <h3>Resources</h3>
                        <ul>
                            {relatedLore.resources.map(item => (
                                <li>
                                    <a href={item.url} class={item.url.includes('/planets/') ? 'planet-link' : ''}>
                                        {item.text}
                                    </a>
                                    {item.description && <span style="color: red; font-weight: bold;">{item.description}</span>}
                                </li>
                            ))}
                        </ul>
                    </>
                )}
                {relatedLore.relationships.length > 0 && (
                    <div>
                        <h3>Relationships</h3>
                        <ul>
                            {relatedLore.relationships.map(item => (
                                <li>
                                    <a href={item.url} class={item.url.includes('/planets/') ? 'planet-link' : ''}>
                                        {item.text}
                                    </a>
                                    {item.description && <span style="color: red; font-weight: bold;">{item.description}</span>}
                                </li>
                            ))}
                        </ul>
                    </div>
                )}

                {relatedLore.organizations.length > 0 && (
                    <div>
                        <h3>Organizations</h3>
                        <ul>
                            {relatedLore.organizations.map(item => (
                                <li>
                                    <a href={item.url} class={item.url.includes('/planets/') ? 'planet-link' : ''}>
                                        {item.text}
                                    </a>
                                    {item.description}
                                </li>
                            ))}
                        </ul>
                    </div>
                )}

                {relatedLore.concepts.length > 0 && (
                    <div>
                        <h3>Concepts</h3>
                        <ul>
                            {relatedLore.concepts.map(item => (
                                <li>
                                    <a href={item.url} class={item.url.includes('/planets/') ? 'planet-link' : ''}>
                                        {item.text}
                                    </a>
                                    {item.description && <span style="color: red; font-weight: bold;">{item.description}</span>}
                                </li>
                            ))}
                        </ul>
                    </div>
                )}

                {relatedLore.features.length > 0 && (
                    <div>
                        <h3>Planetary Features</h3>
                        <ul>
                            {relatedLore.features.map(item => (
                                <li>
                                    <a href={item.url} class={item.url.includes('/planets/') ? 'planet-link' : ''}>
                                        {item.text}
                                    </a>
                                    {item.description && <span style="color: red; font-weight: bold;">{item.description}</span>}
                                </li>
                            ))}
                        </ul>
                    </div>
                )}

                {relatedLore.places.length > 0 && (
                    <div>
                        <h3>Places</h3>
                        <ul>
                            {relatedLore.places.map(item => (
                                <li>
                                    <a href={item.url} class={item.url.includes('/planets/') ? 'planet-link' : ''}>
                                        {item.text}
                                    </a>
                                    {item.description && <span style="color: red; font-weight: bold;">{item.description}</span>}
                                </li>
                            ))}
                        </ul>
                    </div>
                )}

                {relatedLore.technology.length > 0 && (
                    <div>
                        <h3>Technology</h3>
                        <ul>
                            {relatedLore.technology.map(item => (
                                <li>
                                    <a href={item.url} class={item.url.includes('/planets/') ? 'planet-link' : ''}>
                                        {item.text}
                                    </a>
                                    {item.description && <span style="color: red; font-weight: bold;">{item.description}</span>}
                                </li>
                            ))}
                        </ul>
                    </div>
                )}
            </div>
        )}
    </div>

    <script is:inline>
        document.addEventListener('DOMContentLoaded', () => {
            const carouselContainers = document.querySelectorAll('.carousel-container');
            carouselContainers.forEach(container => {
                const images = container.querySelector('.carousel-images');
                const dots = container.querySelectorAll('.nav-dot');
                let currentSlide = 0;

                const updateCarousel = () => {
                    images.style.transform = `translateX(-${currentSlide * 100}%)`;
                    dots.forEach((dot, index) => {
                        if (index === currentSlide) {
                            dot.classList.add('active');
                        } else {
                            dot.classList.remove('active');
                        }
                    });
                };

                dots.forEach(dot => {
                    dot.addEventListener('click', (e) => {
                        currentSlide = parseInt(e.target.dataset.slide);
                        updateCarousel();
                    });
                });

                updateCarousel(); // Initialize carousel
            });
        });
    </script>
</BaseLayout> 